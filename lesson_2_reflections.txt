What happens when you initialize a repository? Why do you need to do it?

When you initialize a git repository it creates an untracked 
directory named .git inside of the directory that you are working 
in. You need it, because that .git directory stores metadata that 
tracks a history of commits for your directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

It allows you to evaluate files that have changed, and therefore 
evaluate when it makes sense to make a logical
commit.

How can you use the staging area to make sure you have one commit per logical change?

Because the staging area shows you what files have been updated, 
and each may differ in purpose.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Working on a new feature, development work, bug fixes, experimental stuff. It helps to keep things separate and therefore not affecting the master branch - production code. It keeps that version clean, bug free, and working.

How do the diagrams help you visualize the branch structure?

They help to understand the structure and flow of work between different branches, their commits, and head states.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is a new point on the checked out branch, which is a new merge commit that stores the changes made in that branch, along with the changes of the branch being merged in. The diagram depicts the new point in which the merge occurs. The previous commits in each branch, are the parents of the merge commit. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros would be that you don't forget to merge, and cons are that they may not be done at the most ideal times. 

